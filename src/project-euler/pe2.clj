; Project Euler 2: Even Fibonacci numbers
; Each new term in the Fibonacci sequence is generated by adding the previous two terms.
; By starting with 1 and 2, the first 10 terms will be:
; 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
; By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

(def fibonacci-sequence
  "A lazy sequence containing all Fibonacci numbers
  source: http://codereview.stackexchange.com/a/316/42632 "
  (letfn
    [(fibonacci-recursive [a b]
       (lazy-seq
         (cons a (fibonacci-recursive b (+ a b)))))]
    (fibonacci-recursive 1 1)))

(defn fibonacci-until [limit]
  "Returns all Fibonacci numbers which are less than `limit`
  source: http://codereview.stackexchange.com/a/316/42632 "
  (take-while #(<= % limit) fibonacci-sequence))

(defn sum-even-numbers [numbers]
  "Returns sum of even numbers in a collection
  source: https://clojuredocs.org/clojure.core/if-let "
  (if-let
    [numbers (seq (filter even? numbers))]
    (reduce + numbers)
    0))

(defn solve-pe2 [limit]
  (sum-even-numbers (fibonacci-until limit)))

(defn -main[]
  (println "Project Euler 2: Even Fibonacci numbers")
  (def i 100)
  (println "Fibonacci until" i "is" (fibonacci-until i))
  (println "ProjectEuler2 up to" i "is" (solve-pe2 i))
  (def i 1000)
  (println "Fibonacci until" i "is" (fibonacci-until i))
  (println "ProjectEuler2 up to" i "is" (solve-pe2 i))
  (def i 4000000)
  (println "Fibonacci until" i "is" (fibonacci-until i))
  (println "ProjectEuler2 up to" i "is" (solve-pe2 i))
  )

(-main)